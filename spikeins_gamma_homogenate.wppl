// Data from experiment 3 involving mild lysis and
// homogenate

// The task is to learn how the number of specimens (or biomass)
// varies with the number of reads using the spikein species
// Then we use this knowledge in predicting the number of
// specimens (or biomass) in remaining species in the mock
// communities

// Species names in index order.
// The first four will be used as the spikeins (because D. hydei did not
// work that well as a spikein). They are present in all experiments. 
var species = [
    "Shelfordella_lateralis",
    "Gryllus_bimaculatus",
    "Gryllodes_sigillatus",
    "Drosophila_yakuba",
    "Drosophila_hydei",
    "Hermetia_illucens",
    "Stick_insect",
    "Cryptolaemus_montrouzieri",
    "Dacnusa_sibirica",
    "D_melanogaster",
    "Aphidoletes_aphidimyza",
    "Encarsia_formosa"
    ];

// Lysate experiments
// Note that experiment E.8.B has
// been excluded because of the
// problem with Gryllodes.
var M_experiments = [
    "E.0.A",
    "E.0.B",
    "E.0.C",
    "E.0.D",
    "E.0.F",
    "E.0.G",
    "E.0.H",
    "E.0.I",
    "E.0.J",
    "E.1.A",
    "E.1.B",
    "E.1.C",
    "E.10.A",
    "E.10.B",
    "E.10.C",
    "E.11.A",
    "E.11.B",
    "E.11.C",
    "E.12.A",
    "E.12.B",
    "E.12.C",
    "E.13.A",
    "E.13.B",
    "E.13.C",
    "E.14.A",
    "E.14.B",
    "E.14.C",
    "E.15.A",
    "E.15.B",
    "E.15.C",
    "E.16.A",
    "E.16.B",
    "E.16.C",
    "E.2.A",
    "E.2.B",
    "E.2.C",
    "E.3.A",
    "E.3.B",
    "E.3.C",
    "E.4.A",
    "E.4.B",
    "E.4.C",
    "E.5.A",
    "E.5.B",
    "E.5.C",
    "E.6.A",
    "E.6.B",
    "E.6.C",
    "E.7.A",
    "E.7.B",
    "E.7.C",
    "E.8.A",
    "E.8.C",
    "E.9.A",
    "E.9.B",
    "E.9.C"
    ];
    
// Homogenate experiments
var H_experiments = [
    "E.hom.0.A",
    "E.hom.0.B",
    "E.hom.0.C",
    "E.hom.0.D",
    "E.hom.0.F",
    "E.hom.0.G",
    "E.hom.0.H",
    "E.hom.0.I",
    "E.hom.0.J",
    "E.hom.14.A",
    "E.hom.14.B",
    "E.hom.14.C",
    "E.hom.15.A",
    "E.hom.15.B",
    "E.hom.15.C",
    "E.hom.16.A",
    "E.hom.16.B",
    "E.hom.16.C",
    "E.hom.7.A",
    "E.hom.7.B",
    "E.hom.7.C"
    ]; 

// Mild lysis reads for all experiments.
// Note that we have 0 reads for Gryllodes
// in one of the experiments. This experiment
// is excluded here for simplicity. We give
// reads for all species here.
var M = [
    [252,767,2031,95,17,0,0,0,0,0,0,0],
    [782,1258,829,1357,15,0,0,0,0,0,0,0],
    [827,1885,358,1175,14,0,0,0,0,0,0,0],
    [929,1457,339,213,37,0,0,0,0,0,0,0],
    [2333,2642,1241,103,33,0,0,0,0,0,0,0],
    [1598,726,1367,152,29,0,0,0,0,0,0,0],
    [983,1712,757,714,55,0,0,0,0,0,0,0],
    [1360,1217,792,833,260,0,0,0,0,0,0,0],
    [604,1103,1402,371,11,0,0,0,0,0,0,0],
    [898,380,200,982,16,0,0,135,0,0,0,0],
    [3079,2785,2259,263,47,0,0,24,0,0,0,0],
    [1640,2887,638,409,85,0,0,330,0,0,0,0],
    [505,1014,629,432,106,0,0,0,41,262,61,0],
    [518,1309,1174,133,48,12,0,0,93,1571,259,0],
    [1542,978,1034,96,79,10,0,0,109,1459,107,0],
    [1122,1548,1179,272,21,0,266,292,0,767,44,0],
    [860,1223,223,19,19,0,791,146,0,115,125,0],
    [665,350,908,52,159,0,214,367,0,1235,84,0],
    [773,1015,334,285,9,0,290,798,185,58,123,0],
    [583,2368,642,341,19,0,1875,591,111,287,145,0],
    [246,321,854,97,30,0,460,400,443,268,380,0],
    [835,390,919,403,17,0,0,373,134,354,282,51],
    [804,966,496,170,21,0,0,207,302,100,255,60],
    [2809,518,1019,19,20,0,0,775,1438,567,557,341],
    [850,943,1359,849,31,206,0,570,274,1013,118,0],
    [2308,2012,1523,95,24,17,0,171,234,631,124,0],
    [282,820,1219,180,0,178,0,153,326,223,121,0],
    [2404,1883,2001,2076,80,53,265,248,436,716,121,0],
    [2475,1848,2114,1810,0,7,1513,763,2007,1303,510,0],
    [3025,1153,799,1250,130,13,5052,578,2075,950,422,0],
    [1174,402,1411,980,22,0,1374,199,1412,49,1513,135],
    [731,1552,344,1237,19,0,350,417,182,85,282,0],
    [94,55,56,2,0,0,147,6,0,16,0,0],
    [911,751,628,155,33,0,0,0,879,0,0,0],
    [923,432,1481,38,14,0,0,0,112,0,0,0],
    [1406,1074,468,321,211,0,0,0,382,0,0,0],
    [1770,820,1820,440,50,0,0,0,0,0,151,0],
    [1346,176,950,32,0,0,0,0,0,0,201,0],
    [901,1456,526,305,171,0,0,0,0,0,151,0],
    [790,899,585,26,28,0,0,0,59,0,192,53],
    [1720,1872,1425,45,53,0,0,0,17,0,447,27],
    [745,1416,651,120,37,0,0,0,101,0,205,36],
    [1688,885,2449,436,32,0,0,93,0,4,200,0],
    [708,354,704,85,37,0,0,182,0,271,165,0],
    [1069,809,892,194,125,0,0,13,0,793,116,0],
    [544,232,728,291,9,35,0,0,298,2750,0,0],
    [986,508,1634,232,36,30,0,0,360,120,0,0],
    [1260,1097,818,590,43,22,0,0,1178,1288,0,0],
    [2257,673,919,568,19,0,0,0,447,207,0,356],
    [1387,348,1079,328,17,0,0,0,216,579,0,303],
    [1351,1158,1912,358,30,0,0,0,326,80,0,317],
    [784,1158,530,373,0,0,1031,0,548,1205,379,0],
    [1069,1119,740,91,20,0,314,0,40,394,99,0],
    [1782,726,780,350,88,2,0,139,638,0,242,0],
    [647,1284,1094,117,36,7,0,56,414,0,198,0],
    [2734,1060,926,244,15,4,0,27,235,0,111,0]
    ];

// Homogenate reads
var H = [
    [1272,1370,903,386,15,0,0,0,0,0,0,0],
    [1201,1834,2115,1186,9,0,0,0,0,0,0,0],
    [1439,1683,2168,1628,37,0,0,0,0,0,0,0],
    [1199,1321,1686,1282,30,0,0,0,0,0,0,0],
    [622,653,416,468,11,0,0,0,0,0,0,0],
    [937,1998,1139,1771,20,0,0,0,0,0,0,0],
    [2629,818,1256,2073,81,0,0,0,0,0,0,0],
    [1978,2525,902,1257,333,0,0,0,0,0,0,0],
    [807,1246,1450,1496,24,0,0,0,0,3,0,0],
    [154,494,258,157,4,605,0,290,0,752,0,0],
    [1510,1786,706,515,13,1682,8,160,3,2162,0,0],
    [1159,838,566,690,0,2401,0,146,4,872,0,0],
    [637,866,1035,972,20,866,3775,849,11,324,4,0],
    [737,910,521,458,0,811,1938,376,4,162,0,0],
    [508,935,348,180,7,969,2338,1816,4,130,0,0],
    [177,631,309,344,5,0,1189,457,4,63,0,0],
    [500,1124,1138,567,0,0,4333,746,19,295,0,0],
    [527,1077,496,918,0,0,2364,944,124,200,6,0],
    [1544,1577,881,1846,6,0,0,0,13,200,0,0],
    [1174,1673,1277,1286,42,0,0,0,52,375,0,0],
    [1187,2036,660,1715,34,0,0,0,11,367,0,2]
    ];

// The model focuses on read totals and proportions
// for the first four spikein species. Therefore,
// we need to  compute the sums and proportions for
// these species.
var M_sums = map(
        function(x) {
            return ( x[0] + x[1] + x[2] + x[3] );
        },
        M
    );

var H_sums = map(
        function(x) {
            return ( x[0] + x[1] + x[2] + x[3] );
        },
        H
    );


var M_props = map(
    function(x) {
        var sum = x[0] + x[1] + x[2] + x[3];
        var xs = Vector([x[0],x[1],x[2],x[3]]);
        return (T.div(xs,sum));
    },
    M
    );

var H_props = map(
    function(x) {
        var sum = x[0] + x[1] + x[2] + x[3];
        var xs = Vector([x[0],x[1],x[2],x[3]]);
        return (T.div(xs,sum));
    },
    H
    );

// Finally, we need the data that we want to predict. We give all data here,
// although we would typically want to predict the non-spikein species (possibly
// excluding D. hydei).

// The data are in the following columns: experiment index, species index, specimens, reads
// The experiment with 0 reads for Gryllodes excluded from the M dataset.
// The M dataset must be subdivided to fit into the default stacksize of webppl.
var M_test1 = [
    [0,0,1,252],
    [0,1,1,767],
    [0,2,1,2031],
    [0,3,1,95],
    [0,4,1,17],
    [1,0,1,782],
    [1,1,1,1258],
    [1,2,1,829],
    [1,3,1,1357],
    [1,4,1,15],
    [2,0,1,827],
    [2,1,1,1885],
    [2,2,1,358],
    [2,3,1,1175],
    [2,4,1,14],
    [3,0,1,929],
    [3,1,1,1457],
    [3,2,1,339],
    [3,3,1,213],
    [3,4,1,37],
    [4,0,1,2333],
    [4,1,1,2642],
    [4,2,1,1241],
    [4,3,1,103],
    [4,4,1,33],
    [5,0,1,1598],
    [5,1,1,726],
    [5,2,1,1367],
    [5,3,1,152],
    [5,4,1,29],
    [6,0,1,983],
    [6,1,1,1712],
    [6,2,1,757],
    [6,3,1,714],
    [6,4,1,55],
    [7,0,1,1360],
    [7,1,1,1217],
    [7,2,1,792],
    [7,3,1,833],
    [7,4,1,260],
    [8,0,1,604],
    [8,1,1,1103],
    [8,2,1,1402],
    [8,3,1,371],
    [8,4,1,11],
    [9,0,1,898],
    [9,1,1,380],
    [9,2,1,200],
    [9,3,1,982],
    [9,4,1,16],
    [9,7,1,135],
    [10,0,1,3079],
    [10,1,1,2785],
    [10,2,1,2259],
    [10,3,1,263],
    [10,4,1,47],
    [10,7,1,24],
    [11,0,1,1640],
    [11,1,1,2887],
    [11,2,1,638],
    [11,3,1,409],
    [11,4,1,85],
    [11,7,1,330],
    [12,0,1,505],
    [12,1,1,1014],
    [12,2,1,629],
    [12,3,1,432],
    [12,4,1,106],
    [12,8,1,41],
    [12,9,5,262],
    [12,10,1,61],
    [13,0,1,518],
    [13,1,1,1309],
    [13,2,1,1174],
    [13,3,1,133],
    [13,4,1,48],
    [13,5,1,12],
    [13,8,1,93],
    [13,9,5,1571],
    [13,10,1,259],
    [14,0,1,1542],
    [14,1,1,978],
    [14,2,1,1034],
    [14,3,1,96],
    [14,4,1,79],
    [14,5,1,10],
    [14,8,1,109],
    [14,9,5,1459],
    [14,10,1,107],
    [15,0,1,1122],
    [15,1,1,1548],
    [15,2,1,1179],
    [15,3,1,272],
    [15,4,1,21],
    [15,6,1,266],
    [15,7,2,292],
    [15,9,5,767],
    [15,10,1,44],
    [16,0,1,860],
    [16,1,1,1223]
];

var M_test2 = [
    [16,2,1,223],
    [16,3,1,19],
    [16,4,1,19],
    [16,6,1,791],
    [16,7,2,146],
    [16,9,5,115],
    [16,10,1,125],
    [17,0,1,665],
    [17,1,1,350],
    [17,2,1,908],
    [17,3,1,52],
    [17,4,1,159],
    [17,6,1,214],
    [17,7,2,367],
    [17,9,5,1235],
    [17,10,1,84],
    [18,0,1,773],
    [18,1,1,1015],
    [18,2,1,334],
    [18,3,1,285],
    [18,4,1,9],
    [18,6,1,290],
    [18,7,5,798],
    [18,8,5,185],
    [18,9,3,58],
    [18,10,2,123],
    [19,0,1,583],
    [19,1,1,2368],
    [19,2,1,642],
    [19,3,1,341],
    [19,4,1,19],
    [19,6,1,1875],
    [19,7,5,591],
    [19,8,5,111],
    [19,9,3,287],
    [19,10,2,145],
    [20,0,1,246],
    [20,1,1,321],
    [20,2,1,854],
    [20,3,1,97],
    [20,4,1,30],
    [20,6,1,460],
    [20,7,5,400],
    [20,8,5,443],
    [20,9,3,268],
    [20,10,2,380],
    [21,0,1,835],
    [21,1,1,390],
    [21,2,1,919],
    [21,3,1,403],
    [21,4,1,17],
    [21,7,3,373],
    [21,8,5,134],
    [21,9,3,354],
    [21,10,2,282],
    [21,11,2,51],
    [22,0,1,804],
    [22,1,1,966],
    [22,2,1,496],
    [22,3,1,170],
    [22,4,1,21],
    [22,7,3,207],
    [22,8,5,302],
    [22,9,3,100],
    [22,10,2,255],
    [22,11,2,60],
    [23,0,1,2809],
    [23,1,1,518],
    [23,2,1,1019],
    [23,3,1,19],
    [23,4,1,20],
    [23,7,3,775],
    [23,8,5,1438],
    [23,9,3,567],
    [23,10,2,557],
    [23,11,2,341],
    [24,0,1,850],
    [24,1,1,943],
    [24,2,1,1359],
    [24,3,1,849],
    [24,4,1,31],
    [24,5,2,206],
    [24,7,1,570],
    [24,8,3,274],
    [24,9,5,1013],
    [24,10,1,118],
    [25,0,1,2308],
    [25,1,1,2012],
    [25,2,1,1523],
    [25,3,1,95],
    [25,4,1,24],
    [25,5,2,17],
    [25,7,1,171],
    [25,8,3,234],
    [25,9,5,631],
    [25,10,1,124],
    [26,0,1,282],
    [26,1,1,820],
    [26,2,1,1219],
    [26,3,1,180]
];

var M_test3 = [
    [26,5,2,178],
    [26,7,1,153],
    [26,8,3,326],
    [26,9,5,223],
    [26,10,1,121],
    [27,0,1,2404],
    [27,1,1,1883],
    [27,2,1,2001],
    [27,3,1,2076],
    [27,4,1,80],
    [27,5,1,53],
    [27,6,1,265],
    [27,7,2,248],
    [27,8,5,436],
    [27,9,2,716],
    [27,10,1,121],
    [28,0,1,2475],
    [28,1,1,1848],
    [28,2,1,2114],
    [28,3,1,1810],
    [28,5,1,7],
    [28,6,1,1513],
    [28,7,2,763],
    [28,8,5,2007],
    [28,9,2,1303],
    [28,10,1,510],
    [29,0,1,3025],
    [29,1,1,1153],
    [29,2,1,799],
    [29,3,1,1250],
    [29,4,1,130],
    [29,5,1,13],
    [29,6,1,5052],
    [29,7,2,578],
    [29,8,5,2075],
    [29,9,2,950],
    [29,10,1,422],
    [30,0,1,1174],
    [30,1,1,402],
    [30,2,1,1411],
    [30,3,1,980],
    [30,4,1,22],
    [30,6,1,1374],
    [30,7,3,199],
    [30,8,8,1412],
    [30,9,2,49],
    [30,10,3,1513],
    [30,11,1,135],
    [31,0,1,731],
    [31,1,1,1552],
    [31,2,1,344],
    [31,3,1,1237],
    [31,4,1,19],
    [31,6,1,350],
    [31,7,3,417],
    [31,8,8,182],
    [31,9,2,85],
    [31,10,3,282],
    [32,0,1,94],
    [32,1,1,55],
    [32,2,1,56],
    [32,3,1,2],
    [32,6,1,147],
    [32,7,3,6],
    [32,9,2,16],
    [33,0,1,911],
    [33,1,1,751],
    [33,2,1,628],
    [33,3,1,155],
    [33,4,1,33],
    [33,8,1,879],
    [34,0,1,923],
    [34,1,1,432],
    [34,2,1,1481],
    [34,3,1,38],
    [34,4,1,14],
    [34,8,1,112],
    [35,0,1,1406],
    [35,1,1,1074],
    [35,2,1,468],
    [35,3,1,321],
    [35,4,1,211],
    [35,8,1,382],
    [36,0,1,1770],
    [36,1,1,820],
    [36,2,1,1820],
    [36,3,1,440],
    [36,4,1,50],
    [36,10,1,151],
    [37,0,1,1346],
    [37,1,1,176],
    [37,2,1,950],
    [37,3,1,32],
    [37,10,1,201],
    [38,0,1,901],
    [38,1,1,1456],
    [38,2,1,526],
    [38,3,1,305],
    [38,4,1,171],
    [38,10,1,151]
];

var M_test4 = [
    [39,0,1,790],
    [39,1,1,899],
    [39,2,1,585],
    [39,3,1,26],
    [39,4,1,28],
    [39,8,1,59],
    [39,10,1,192],
    [39,11,1,53],
    [40,0,1,1720],
    [40,1,1,1872],
    [40,2,1,1425],
    [40,3,1,45],
    [40,4,1,53],
    [40,8,1,17],
    [40,10,1,447],
    [40,11,1,27],
    [41,0,1,745],
    [41,1,1,1416],
    [41,2,1,651],
    [41,3,1,120],
    [41,4,1,37],
    [41,8,1,101],
    [41,10,1,205],
    [41,11,1,36],
    [42,0,1,1688],
    [42,1,1,885],
    [42,2,1,2449],
    [42,3,1,436],
    [42,4,1,32],
    [42,7,1,93],
    [42,9,1,4],
    [42,10,1,200],
    [43,0,1,708],
    [43,1,1,354],
    [43,2,1,704],
    [43,3,1,85],
    [43,4,1,37],
    [43,7,1,182],
    [43,9,1,271],
    [43,10,1,165],
    [44,0,1,1069],
    [44,1,1,809],
    [44,2,1,892],
    [44,3,1,194],
    [44,4,1,125],
    [44,7,1,13],
    [44,9,1,793],
    [44,10,1,116],
    [45,0,1,544],
    [45,1,1,232],
    [45,2,1,728],
    [45,3,1,291],
    [45,4,1,9],
    [45,5,1,35],
    [45,8,3,298],
    [45,9,2,2750],
    [46,0,1,986],
    [46,1,1,508],
    [46,2,1,1634],
    [46,3,1,232],
    [46,4,1,36],
    [46,5,1,30],
    [46,8,3,360],
    [46,9,2,120],
    [47,0,1,1260],
    [47,1,1,1097],
    [47,2,1,818],
    [47,3,1,590],
    [47,4,1,43],
    [47,5,1,22],
    [47,8,3,1178],
    [47,9,2,1288],
    [48,0,1,2257],
    [48,1,1,673],
    [48,2,1,919],
    [48,3,1,568],
    [48,4,1,19],
    [48,8,2,447],
    [48,9,2,207],
    [48,11,9,356],
    [49,0,1,1387],
    [49,1,1,348],
    [49,2,1,1079],
    [49,3,1,328],
    [49,4,1,17],
    [49,8,2,216],
    [49,9,2,579],
    [49,11,9,303],
    [50,0,1,1351],
    [50,1,1,1158],
    [50,2,1,1912],
    [50,3,1,358],
    [50,4,1,30],
    [50,8,2,326],
    [50,9,2,80],
    [50,11,9,317],
    [51,0,1,784],
    [51,1,1,1158],
    [51,2,1,530],
    [51,3,1,373]
];

var M_test5 = [
    [51,6,1,1031],
    [51,8,1,548],
    [51,9,3,1205],
    [51,10,1,379],
    [52,0,1,1069],
    [52,1,1,1119],
    [52,2,1,740],
    [52,3,1,91],
    [52,4,1,20],
    [52,6,1,314],
    [52,8,1,40],
    [52,9,3,394],
    [52,10,1,99],
    [53,0,1,1782],
    [53,1,1,726],
    [53,2,1,780],
    [53,3,1,350],
    [53,4,1,88],
    [53,5,1,2],
    [53,7,1,139],
    [53,8,5,638],
    [53,10,3,242],
    [54,0,1,647],
    [54,1,1,1284],
    [54,2,1,1094],
    [54,3,1,117],
    [54,4,1,36],
    [54,5,1,7],
    [54,7,1,56],
    [54,8,5,414],
    [54,10,3,198],
    [55,0,1,2734],
    [55,1,1,1060],
    [55,2,1,926],
    [55,3,1,244],
    [55,4,1,15],
    [55,5,1,4],
    [55,7,1,27],
    [55,8,5,235],
    [55,10,3,111]
    ];

var H_test = [
    [0,0,1,1272],
    [0,1,1,1370],
    [0,2,1,903],
    [0,3,1,386],
    [0,4,1,15],
    [1,0,1,1201],
    [1,1,1,1834],
    [1,2,1,2115],
    [1,3,1,1186],
    [1,4,1,9],
    [2,0,1,1439],
    [2,1,1,1683],
    [2,2,1,2168],
    [2,3,1,1628],
    [2,4,1,37],
    [3,0,1,1199],
    [3,1,1,1321],
    [3,2,1,1686],
    [3,3,1,1282],
    [3,4,1,30],
    [4,0,1,622],
    [4,1,1,653],
    [4,2,1,416],
    [4,3,1,468],
    [4,4,1,11],
    [5,0,1,937],
    [5,1,1,1998],
    [5,2,1,1139],
    [5,3,1,1771],
    [5,4,1,20],
    [6,0,1,2629],
    [6,1,1,818],
    [6,2,1,1256],
    [6,3,1,2073],
    [6,4,1,81],
    [7,0,1,1978],
    [7,1,1,2525],
    [7,2,1,902],
    [7,3,1,1257],
    [7,4,1,333],
    [8,0,1,807],
    [8,1,1,1246],
    [8,2,1,1450],
    [8,3,1,1496],
    [8,4,1,24],
    [8,9,0,3],
    [9,0,1,154],
    [9,1,1,494],
    [9,2,1,258],
    [9,3,1,157],
    [9,4,1,4],
    [9,5,2,605],
    [9,7,1,290],
    [9,9,5,752],
    [10,0,1,1510],
    [10,1,1,1786],
    [10,2,1,706],
    [10,3,1,515],
    [10,4,1,13],
    [10,5,2,1682],
    [10,6,0,8],
    [10,7,1,160],
    [10,8,3,3],
    [10,9,5,2162],
    [11,0,1,1159],
    [11,1,1,838],
    [11,2,1,566],
    [11,3,1,690],
    [11,5,2,2401],
    [11,7,1,146],
    [11,8,3,4],
    [11,9,5,872],
    [12,0,1,637],
    [12,1,1,866],
    [12,2,1,1035],
    [12,3,1,972],
    [12,4,1,20],
    [12,5,1,866],
    [12,6,1,3775],
    [12,7,2,849],
    [12,8,5,11],
    [12,9,2,324],
    [12,10,1,4],
    [13,0,1,737],
    [13,1,1,910],
    [13,2,1,521],
    [13,3,1,458],
    [13,5,1,811],
    [13,6,1,1938],
    [13,7,2,376],
    [13,8,5,4],
    [13,9,2,162],
    [14,0,1,508],
    [14,1,1,935],
    [14,2,1,348],
    [14,3,1,180],
    [14,4,1,7],
    [14,5,1,969],
    [14,6,1,2338],
    [14,7,2,1816],
    [14,8,5,4],
    [14,9,2,130],
    [15,0,1,177],
    [15,1,1,631],
    [15,2,1,309],
    [15,3,1,344],
    [15,4,1,5],
    [15,6,1,1189],
    [15,7,3,457],
    [15,8,8,4],
    [15,9,2,63],
    [16,0,1,500],
    [16,1,1,1124],
    [16,2,1,1138],
    [16,3,1,567],
    [16,6,1,4333],
    [16,7,3,746],
    [16,8,8,19],
    [16,9,2,295],
    [17,0,1,527],
    [17,1,1,1077],
    [17,2,1,496],
    [17,3,1,918],
    [17,6,1,2364],
    [17,7,3,944],
    [17,8,8,124],
    [17,9,2,200],
    [17,10,3,6],
    [18,0,1,1544],
    [18,1,1,1577],
    [18,2,1,881],
    [18,3,1,1846],
    [18,4,1,6],
    [18,8,2,13],
    [18,9,2,200],
    [19,0,1,1174],
    [19,1,1,1673],
    [19,2,1,1277],
    [19,3,1,1286],
    [19,4,1,42],
    [19,8,2,52],
    [19,9,2,375],
    [20,0,1,1187],
    [20,1,1,2036],
    [20,2,1,660],
    [20,3,1,1715],
    [20,4,1,34],
    [20,8,2,11],
    [20,9,2,367],
    [20,11,9,2]
    ];

var H_debug = [[10,5,2,1682],
    [10,0,1,1510],
    [10,6,0,8],
    [10,7,1,160],
    [10,8,3,3],
    [10,9,5,2162]];
 

// Here we set the data to be used in the model, using the data described above
var read_props = H_props;
var read_sums = H_sums;

// Here we define the basic model
var mymodel = function() {

    // Assume that gamma distribution describes the DNA
    // yield from each insect, regardless of species.
    // First consider the effect of the shape parameter k on the
    // read proportions.
    var k = sample( Gamma({shape: 1, scale: 10}) );
    var alphas = Vector([ k, k, k, k ]);
    var alpha_sum = k + k + k + k;

    map(
        function(x) {
            factor( Dirichlet({alpha: alphas}).score(x));
        },
        read_props
    );

    // Now consider the effect of the rate parameter of the
    // yield gamma, and of the PCR factor on the total read count.
   
    // It is convenient to use a log-normal prior for the rate
    // parameter of the gamma. The rate should be a relatively
    // small number, so use a wide prior on small values.
    var logTheta = sample( Gaussian({mu: 0.0, sigma: 2.0}) );
    var theta = Math.exp(logTheta);

    // For the PCR factor, it is also convenient to use a
    // log-normal distribution. Here, we can benefit from a
    // hyper-prior to find the best parameters. Specifically,
    // we use a conjugate normal-inverse-gamma prior for
    // the parameters of the log-normal distribution describing
    // the distribution of PCR factors. Here we set the hyper-
    // parameters such that the standard deviation around the
    // mean is about 3 in the prior. The mean of the hyperprior
    // is set to 6.5, which is close to the mean of the log of
    // the read counts. This is consistent with a mean for the
    // DNA yield of 0.0.
    var tau = sample( Gamma({shape: 3, scale: 0.037}) );
    var sigma = Math.sqrt(1.0 / tau);
    var mu = sample( Gaussian({mu: 6.5, sigma: sigma}) );
    var pcr_factors = map(
        function(x) {
            var logC = sample( Gaussian({mu: mu, sigma: sigma}) );
            var c = Math.exp(logC);
            factor( Gamma({shape:alpha_sum, scale: c*theta}).score(x) );
            return c;
        },
        read_sums
    );

    return ({k: k, theta: theta, mu: mu, sigma: sigma, c: pcr_factors});
}


// Test code with fast infer statement, for debugging
//var dist = Infer({method:'incrementalMH', samples:10, lag:10, burn:10, model:mymodel});

// Real infer strategies. Note that HMC tends to fail, probably a bug in WebPPL.
//var dist = Infer({method:'incrementalMH', samples: 1000, lag: 10000, burn: 1000, model: mymodel})
//var dist = Infer({method:'MCMC', kernel: 'MH', samples: 1000, lag: 10000, burn: 1000, model: mymodel})
//var dist = Infer({method:'MCMC', kernel: {HMC: {steps: 10, stepSize: 0.05}}, samples: 1000, lag: 10, burn: 100, model: mymodel})
var dist = Infer({method:'SMC', particles: 10000, rejuvSteps: 50, model: mymodel})

console.log( 'Inference strategy:' );
console.log( "var dist = Infer({method:'SMC', particles: 10000, rejuvSteps: 50, model: mymodel})" );

// Print normalization constant (only SMC, other methods will generate "undefined")
console.log( 'log Z = ' + dist.normalizationConstant );

// Print estimates for quick exploration of model
var marg_k = map(
    function(x) {
        return(x.value.k);
    },
    dist.samples
    );
var mean_k = listMean(marg_k);
var sd_k = listStdev(marg_k, mean_k);
console.log("DNA yield shape (k):", mean_k, "+/-", sd_k);

var marg_theta = map(
    function(x) {
        return(x.value.theta);
    },
    dist.samples
    );
var mean_theta = listMean(marg_theta);
var sd_theta = listStdev(marg_theta, mean_theta);
console.log("DNA yield scale (theta):", mean_theta, "+/-", sd_theta);

var marg_mu = map(
    function(x) {
        return(x.value.mu);
    },
    dist.samples
    );
var mean_mu = listMean(marg_mu);
var sd_mu = listStdev(marg_mu, mean_mu);
console.log("PCR factor log mean (mu):", mean_mu, "+/-", sd_mu);

var marg_sigma = map(
    function(x) {
        return(x.value.sigma);
    },
    dist.samples
    );
var mean_sigma = listMean(marg_sigma);
var sd_sigma = listStdev(marg_sigma, mean_sigma);
console.log("PCR factor log stand dev (sigma):", mean_sigma, "+/-", sd_sigma);

// Write samples to file
var headers = ['score', 'k', 'theta', 'mu', 'sigma'];
var header_pcr_factors = mapIndexed(
    function(idx, x) {
        return( 'c' + (idx+1) );
    },
    read_sums
    );

console.log('"'+ headers.join('", "') + '", "' + header_pcr_factors.join('", "') + '"');

var dist_subsample = Infer({method: 'SMC', particles: 10000, model: function(x) { return sample( dist ); } });
 
map(
    function(x) {
        var value = x.value;
        var score = x.score;
        console.log( x.score + ',' + x.value.k + ',' + x.value.theta + ',' + x.value.mu + ',' + x.value.sigma + ',' + x.value.c.join(',') );
    },
    dist_subsample.samples
    );

// Function to generate key estimates related to the number of specimens from number of reads,
// using the model estimates above
var predict = function (x) {

    // Exclude certain entries
    if ( x[1] <= 4 )
        return;
    
    // Get indata for prediction
    var num_reads = x[3];
    var exp_index = x[0];

    // Describe prediction model
    var predict_model = function() {

        var n = sample( RandomInteger({n: 20}) ) + 1;

        var x = sample( dist );
    
        var k = x.k;
        var theta = x.theta;
        var c = x.c[exp_index];
    
        observe( Gamma({shape: n*k, scale: theta*c}), num_reads);

        return n;
    }

    // Generate prediction
    var dist_n = Infer({method:'SMC', particles: 1000, model: predict_model})

    // Extract useful info about the prediction
    var xs = map( function(x) { x.value }, dist_n.samples );
    var mean_pred = listMean( xs );
    var sd_pred = listStdev( xs, mean_pred );
    var sorted_xs = sort(xs);
    var median_pred = sorted_xs[Math.floor(sorted_xs.length/2)];
    var lower95_pred = sorted_xs[Math.floor(sorted_xs.length*0.025)];
    var upper95_pred = sorted_xs[Math.floor(sorted_xs.length*0.975)];
    var lower90_pred = sorted_xs[Math.floor(sorted_xs.length*0.05)];
    var upper90_pred = sorted_xs[Math.floor(sorted_xs.length*0.95)];
    var lower80_pred = sorted_xs[Math.floor(sorted_xs.length*0.1)];
    var upper80_pred = sorted_xs[Math.floor(sorted_xs.length*0.9)];
    var lower50_pred = sorted_xs[Math.floor(sorted_xs.length*0.25)];
    var upper50_pred = sorted_xs[Math.floor(sorted_xs.length*0.75)];

    var inc  = function(x) { return x+1; };
    var nums = mapN(inc, 20);
    var count = function(x) { reduce( function(y, acc) { if (y==x) return (acc+1); else return acc; }, 0, xs ) };
    var counts = map( count, nums );
    var indexed_counts = zip( nums, counts );
    var max_count = reduce( function(x, acc) { if (x[1] > acc) { return x[1]; } else { return acc; } }, 0, indexed_counts );
    var max_pp_entry = find( function (x) { x[1] == max_count; }, indexed_counts );
    var max_pp_num = max_pp_entry[0];

    // Check probability that this is a suspiciously low count
    var outlier_model = function () {

        var x = sample( dist );
    
        var k = x.k;
        var theta = x.theta;
        var c = x.c[exp_index];
 
        var y = sample( Gamma({shape: k, scale: c*theta}) );
        
        if ( y < num_reads ) { return 1; } else { return 0; };        
    }
    
    // Generate estimate of probability that this is an outlier 
    var dist_outlier = Infer({method:'SMC', particles: 1000, model: outlier_model})

    // Extract samples
    var xs = map( function(x) { x.value }, dist_outlier.samples );
 
    // Compute probability
    var tail_prob = sum( xs ) / xs.length;

    // Print result row
    console.log(
        '"' + H_experiments[x[0]] + '",' +
        '"' + species[x[1]] + '",' +
        x[2] + ',' +
        x[3] + ',' +
        mean_pred + ',' +
        sd_pred + ',' +
        median_pred + ',' +
        lower95_pred + ',' +
        upper95_pred + ',' +
        lower90_pred + ',' +
        upper90_pred + ',' +
        lower80_pred + ',' +
        upper80_pred + ',' +
        lower50_pred + ',' +
        upper50_pred + ',' +
        max_pp_num + ',' +
        tail_prob
    );
}


// Generate predictions
var headers2 = [ "Experiment", "Species", "Specimens", "Reads", "mean", "sd", "median", "lower95", "upper95", "lower90", "upper90", "lower80", "upper80", "lower50", "upper50", "max_post_prob", "tail_prob" ];

console.log( '"' + headers2.join('","') + '"' );
map( predict, H_test );


"done"

